@using Sandbox.UI;
@using Sandbox;
@using System;
@using System.Collections.Generic;
@using System.Linq;

@namespace Sandbox

<root>
    <div class="canvas" @ref=Canvas />
    <TextEntry @ref=Input onsubmit=@Submit onblur=@Close />
</root>

<style>
    iconpanel {
        font-family: "Material Icons";
    }

    $rounding: 4px;
    $blue: #3273eb;

    Chat {
        position: absolute;
        bottom: 128px;
        left: 0;
        z-index: 1001;
        flex-direction: column;
        width: 505px;
        max-height: 435px;
        font-family: Poppins;
        font-size: 16px;
        pointer-events: none;
        transition: all 0.1s ease, border 0s ease;
        padding: 18px;
        transform: skewY(-3);
        textentry

    {
        transition: opacity 0.1s ease;
        flex-shrink: 0;
        min-height: 44px;
        opacity: 0;
        background-color: rgba(#0f161b, 0.9);
        border-radius: $rounding;
        margin-bottom: 28px;
    }

    .placeholder {
        color: #c0cee7;
    }

    .content-label {
        margin-left: 16px;
    }

    .placeholder,
    .content-label {
        color: rgba(216, 208, 208, 0.952);
        color: darken(#c8c0e7, 20%);
        font-size: 14px;
        font-family: Poppins;
        font-weight: 400;
        text-shadow: 2px 2px 1px rgba(black, 0.1);
        margin-top: 11px;
    }

    .canvas {
        flex-direction: column;
        align-items: flex-start;
        overflow: scroll;
        ChatRow

    {
        max-width: 100%;
        color: white;
        opacity: 1;
        flex-shrink: 0;
        background-color: rgba(#090d10, 0.9);
        padding: 4px 10px;
        border-radius: $rounding;
        transition: opacity 0.15s ease;
        margin-bottom: 6px;
        .header

    {
        flex-shrink: 0;
        flex-grow: 0;
        padding-left: 4px;
        margin-top: 3px;
        font-weight: 700;
        font-size: 16px;
        color: $blue;
        padding-right: 8px;
        text-shadow: 2px 2px 1px rgba(black, 0.3);
    }

    .msg {
        margin-top: 3px;
        color: #c0cee7;
        font-size: 16px;
        text-shadow: 2px 2px 1px rgba(black, 0.1);
    }

    &.info {
        .header, .msg

    {
        color: gold;
        font-weight: bold;
    }

    }

    img {
        flex-shrink: 0;
        height: 30px;
        width: 30px;
        border-radius: 100px;
    }

    &.noname {
        .name

    {
        display: none;
    }

    }

    &.friend {
        .name

    {
        color: #79a067;
    }

    }

    &.stale {
        transition: opacity 1s ease;
        opacity: 0;
    }

    }
    }

    &.open {
        pointer-events: all;
        backdrop-filter-blur: 20px;
        background-image: linear-gradient(to right, rgba(#080813, 0.9), rgba(#1c1c38, 0.55), rgba(#1c1c38, 0.1));
        left: 2%;
        border-radius: $rounding $rounding 0 0;
        textentry

    {
        opacity: 1;
        width: 100%;
        cursor: text;
    }

    .canvas {
        ChatRow

    {
        transition: opacity 0.1s ease;
        opacity: 1;
    }

    }
    }
    }
</style>

@code
{
    public static Chat Current;

    public Panel Canvas { get; protected set; }
    public TextEntry Input { get; protected set; }

    Queue<ChatRow> Rows = new();

    protected int MaxItems => 100;
    protected float MessageLifetime => 10f;

    public bool IsOpen
    {
        get => HasClass("open");
        set
        {
            SetClass("open", value);
            if (value)
            {
                Input.Focus();
                Input.Text = string.Empty;
                Input.Label.SetCaretPosition(0);
            }
        }
    }

    protected override void OnAfterTreeRender(bool firstTime)
    {
        base.OnAfterTreeRender(firstTime);
        if(firstTime)
            Current?.AddEntry("Server", "Hi :)", 0, true);

        Canvas.PreferScrollToBottom = true;
        Input.AcceptsFocus = true;
        Input.AllowEmojiReplace = true;

        Current = this;
    }

    public override void Tick()
    {
        if (Sandbox.Input.Pressed(GameInputActions.Chat))
            Open();

        Input.Placeholder = string.IsNullOrEmpty(Input.Text) ? "Enter your message..." : string.Empty;
    }

    void Open()
    {
        AddClass("open");
        Input.Focus();
        Canvas.TryScrollToBottom();
    }

    void Close()
    {
        RemoveClass("open");
        Input.Blur();
        Input.Text = string.Empty;
        Input.Label.SetCaretPosition(0);
    }

    void Submit()
    {
        var msg = Input.Text.Trim();
        Input.Text = "";

        Close();

        if (string.IsNullOrWhiteSpace(msg)) return;

        Say(msg);
    }

    public void AddEntry(string name, string message, ulong playerId = 0, bool isInfo = false)
    {
        var e = Canvas.AddChild<ChatRow>();

        var player = LocalPlayer.Pawn;
        if (!player.IsValid()) return;

        if (playerId > 0)
            e.PlayerId = playerId;

        e.Message = message;
        e.Name = $"{name}";
        e.SetClass("noname", string.IsNullOrEmpty(name));
        e.SetClass("info", isInfo);
        e.BindClass("stale", () => e.Lifetime > MessageLifetime);

        {
            var fr = new Sandbox.Friend((long)playerId);
            e.SetClass("friend", fr.IsFriend || Connection.Local.SteamId == playerId);
        }

        Canvas.TryScrollToBottom();

        Rows.Enqueue(e);

        // Kill an item if we need to
        if (Rows.Count > MaxItems)
            Rows.Dequeue().Delete();
    }
}
